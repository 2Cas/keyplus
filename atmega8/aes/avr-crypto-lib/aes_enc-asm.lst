   1               	# 1 "wireless/aes/aes_enc-asm.S"
   1               	/* aes_enc-asm.S */
   0               	
   0               	
   2               	/*
   3               	    This file is part of the AVR-Crypto-Lib.
   4               	    Copyright (C) 2006-2015 Daniel Otte (bg@nerilex.org)
   5               	
   6               	    This program is free software: you can redistribute it and/or modify
   7               	    it under the terms of the GNU General Public License as published by
   8               	    the Free Software Foundation, either version 3 of the License, or
   9               	    (at your option) any later version.
  10               	
  11               	    This program is distributed in the hope that it will be useful,
  12               	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13               	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14               	    GNU General Public License for more details.
  15               	
  16               	    You should have received a copy of the GNU General Public License
  17               	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18               	*/
  19               	/**
  20               	 * \file     aes_enc-asm.S
  21               	 * \email    bg@nerilex.org
  22               	 * \author   Daniel Otte 
  23               	 * \date     2009-01-10
  24               	 * \license  GPLv3 or later
  25               	 * 
  26               	 */
  27               	
  28               	#include "avr-asm-macros.S"
   1               	/* avr-asm-macros.S */
  33               	.list
  34               	/*******************************************************************************
  35               	*  MACRO SECTION                                                               *
  36               	*******************************************************************************/
  37               	
  38               	.macro push_ p1:req, p2:vararg
  39               		push \p1
  40               	.ifnb \p2
  41               		push_ \p2
  42               	.endif
  43               	.endm
  44               	
  45               	.macro pop_ p1:req, p2:vararg
  46               		pop \p1
  47               	.ifnb \p2
  48               		pop_ \p2
  49               	.endif
  50               	.endm
  51               	
  52               	.macro push_range from:req, to:req
  53               		push \from
  54               	.if     \to-\from
  55               		push_range "(\from+1)",\to
  56               	.endif
  57               	.endm
  58               	
  59               	.macro pop_range from:req, to:req
  60               		pop \to
  61               	.if     \to-\from
  62               		pop_range \from,"(\to-1)"
  63               	.endif
  64               	.endm
  65               	
  66               	.macro stack_alloc size:req, reg1=r30, reg2=r31
  67               		in r0, _SFR_IO_ADDR(SREG)
  68               		in \reg1, _SFR_IO_ADDR(SPL)
  69               		in \reg2, _SFR_IO_ADDR(SPH)
  70               		sbiw \reg1, \size
  71               		cli
  72               		out _SFR_IO_ADDR(SPH), \reg2
  73               		out _SFR_IO_ADDR(SREG), r0
  74               		out _SFR_IO_ADDR(SPL), \reg1
  75               	.endm
  76               	
  77               	.macro stack_free size:req, reg1=r30, reg2=r31
  78               		in r0, _SFR_IO_ADDR(SREG)
  79               		in \reg1, _SFR_IO_ADDR(SPL)
  80               		in \reg2, _SFR_IO_ADDR(SPH)
  81               		adiw \reg1, \size
  82               		cli
  83               		out _SFR_IO_ADDR(SPH), \reg2
  84               		out _SFR_IO_ADDR(SREG), r0
  85               		out _SFR_IO_ADDR(SPL), \reg1
  86               	.endm
  87               	
  88               	
  89               	.macro stack_alloc_large size:req, reg1=r30, reg2=r31
  90               		in r0, _SFR_IO_ADDR(SREG)
  91               		in \reg1, _SFR_IO_ADDR(SPL)
  92               		in \reg2, _SFR_IO_ADDR(SPH)
  93               		subi \reg1, lo8(\size)
  94               		sbci \reg2, hi8(\size)
  95               		cli
  96               		out _SFR_IO_ADDR(SPH), \reg2
  97               		out _SFR_IO_ADDR(SREG), r0
  98               		out _SFR_IO_ADDR(SPL), \reg1
  99               	.endm
 100               	
 101               	.macro stack_free_large size:req, reg1=r30, reg2=r31
 102               		in r0, _SFR_IO_ADDR(SREG)
 103               		in \reg1, _SFR_IO_ADDR(SPL)
 104               		in \reg2, _SFR_IO_ADDR(SPH)
 105               		adiw \reg1, 63
 106               		adiw \reg1, (\size-63)
 107               		cli
 108               		out _SFR_IO_ADDR(SPH), \reg2
 109               		out _SFR_IO_ADDR(SREG), r0
 110               		out _SFR_IO_ADDR(SPL), \reg1
 111               	.endm
 112               	
 113               	.macro stack_free_large2 size:req, reg1=r30, reg2=r31
 114               		in r0, _SFR_IO_ADDR(SREG)
 115               		in \reg1, _SFR_IO_ADDR(SPL)
 116               		in \reg2, _SFR_IO_ADDR(SPH)
 117               		adiw \reg1, 63
 118               		adiw \reg1, 63
 119               		adiw \reg1, (\size-63*2)
 120               		cli
 121               		out _SFR_IO_ADDR(SPH), \reg2
 122               		out _SFR_IO_ADDR(SREG), r0
 123               		out _SFR_IO_ADDR(SPL), \reg1
 124               	.endm
 125               	
 126               	.macro stack_free_large3 size:req, reg1=r30, reg2=r31
 127               		in r0, _SFR_IO_ADDR(SREG)
 128               		in \reg1, _SFR_IO_ADDR(SPL)
 129               		in \reg2, _SFR_IO_ADDR(SPH)
 130               		push r16
 131               		push r17
 132               		ldi r16, lo8(\size)
 133               		ldi r17, hi8(\size)
 134               		add \reg1, r16
 135               		adc \reg2, r17
 136               		pop r17
 137               		pop r16
 138               		cli
 139               		out _SFR_IO_ADDR(SPH), \reg2
 140               		out _SFR_IO_ADDR(SREG), r0
 141               		out _SFR_IO_ADDR(SPL), \reg1
 142               	.endm
 143               	
  29               	
  30               	
  31               	/*
  32               	 * param a: r24
  33               	 * param b: r22
  34               	 * param reducer: r0
  35               	 */
  36               	A = 28
  37               	B = 29
  38               	P = 0
  39               	xREDUCER = 25
  40               	
  41               	.global aes256_enc
  42               	aes256_enc:
  43:wireless/aes/aes_enc-asm.S **** 	ldi r20, 14
  44:wireless/aes/aes_enc-asm.S **** 	rjmp aes_encrypt_core
  45               	
  46               	.global aes192_enc
  47               	aes192_enc:
  48:wireless/aes/aes_enc-asm.S **** 	ldi r20, 12
  49:wireless/aes/aes_enc-asm.S **** 	rjmp aes_encrypt_core
  50               	
  51               	.global aes128_enc
  52               	aes128_enc:
  53:wireless/aes/aes_enc-asm.S **** 	ldi r20, 10
  54               	
  55               	
  56               	/*
  57               	  void aes_encrypt_core(aes_cipher_state_t *state, const aes_genctx_t *ks, uint8_t rounds)
  58               	*/
  59               	T0= 2
  60               	T1= 3
  61               	T2= 4
  62               	T3= 5
  63               	SBOX_SAVE0 = 6
  64               	SBOX_SAVE1 = 7
  65               	ST00 =  8
  66               	ST01 =  9
  67               	ST02 = 10
  68               	ST03 = 11
  69               	ST10 = 12
  70               	ST11 = 13
  71               	ST12 = 14
  72               	ST13 = 15
  73               	ST20 = 16
  74               	ST21 = 17
  75               	ST22 = 18
  76               	ST23 = 19
  77               	ST30 = 20
  78               	ST31 = 21
  79               	ST32 = 22
  80               	ST33 = 23
  81               	CTR = 24
  82               	/*
  83               	 * param state:  r24:r25
  84               	 * param ks:     r22:r23
  85               	 * param rounds: r20   
  86               	 */
  87               	.global aes_encrypt_core
  88               	aes_encrypt_core:
  89:wireless/aes/aes_enc-asm.S **** 	push_range 2, 17
  90:wireless/aes/aes_enc-asm.S **** 	push r28
  91:wireless/aes/aes_enc-asm.S **** 	push r29
  92:wireless/aes/aes_enc-asm.S **** 	push r24
  93:wireless/aes/aes_enc-asm.S **** 	push r25
  94:wireless/aes/aes_enc-asm.S **** 	movw r26, r22
  95:wireless/aes/aes_enc-asm.S **** 	movw r30, r24
  96:wireless/aes/aes_enc-asm.S **** 	mov  CTR, r20
  97:wireless/aes/aes_enc-asm.S **** 	clt
  98               		
  99               		.irp row, 0, 1, 2, 3
 100:wireless/aes/aes_enc-asm.S **** 		.irp col, 0, 1, 2, 3
 101:wireless/aes/aes_enc-asm.S **** 			ld ST\row\col, Z+
 102:wireless/aes/aes_enc-asm.S **** 		.endr
 103:wireless/aes/aes_enc-asm.S **** 	.endr
 104               		
 105:wireless/aes/aes_enc-asm.S **** 	ldi xREDUCER, 0x1b /* load reducer */
 106:wireless/aes/aes_enc-asm.S **** 	ldi r31, hi8(aes_sbox)
 107               		
 108               		/* key whitening */
 109               	1:
 110               	
 111               		.irp row, 0, 1, 2, 3
 112:wireless/aes/aes_enc-asm.S **** 		.irp col, 0, 1, 2, 3
 113:wireless/aes/aes_enc-asm.S **** 			ld r0, X+
 114:wireless/aes/aes_enc-asm.S **** 			eor ST\row\col, r0
 115:wireless/aes/aes_enc-asm.S **** 		.endr
 116:wireless/aes/aes_enc-asm.S **** 	.endr
 117               		
 118:wireless/aes/aes_enc-asm.S **** 	brtc 2f
 119               	exit:
 120:wireless/aes/aes_enc-asm.S **** 	pop r31
 121:wireless/aes/aes_enc-asm.S **** 	pop r30
 122               		.irp row, 0, 1, 2, 3
 123:wireless/aes/aes_enc-asm.S **** 			.irp col, 0, 1, 2, 3
 124:wireless/aes/aes_enc-asm.S **** 			st Z+, ST\row\col
 125:wireless/aes/aes_enc-asm.S **** 		.endr
 126:wireless/aes/aes_enc-asm.S **** 	.endr
 127:wireless/aes/aes_enc-asm.S **** 	pop r29
 128:wireless/aes/aes_enc-asm.S **** 	pop r28
 129:wireless/aes/aes_enc-asm.S **** 	pop_range 2, 17
 130:wireless/aes/aes_enc-asm.S **** 	ret
 131               	
 132:wireless/aes/aes_enc-asm.S **** 2:	dec CTR
 133:wireless/aes/aes_enc-asm.S **** 	brne 3f
 134:wireless/aes/aes_enc-asm.S **** 	set
 135               	3:
 136               	
 137               		/* encryption loop */ 
 138               	
 139               		/* SBOX substitution and shifting */
 140:wireless/aes/aes_enc-asm.S **** 	mov r30, ST00
 141:wireless/aes/aes_enc-asm.S **** 	lpm ST00, Z
 142:wireless/aes/aes_enc-asm.S **** 	mov r30, ST10
 143:wireless/aes/aes_enc-asm.S **** 	lpm ST10, Z
 144:wireless/aes/aes_enc-asm.S **** 	mov r30, ST20
 145:wireless/aes/aes_enc-asm.S **** 	lpm ST20, Z
 146:wireless/aes/aes_enc-asm.S **** 	mov r30, ST30
 147:wireless/aes/aes_enc-asm.S **** 	lpm ST30, Z
 148               	
 149:wireless/aes/aes_enc-asm.S **** 	mov r30, ST01
 150:wireless/aes/aes_enc-asm.S **** 	lpm T0, Z
 151:wireless/aes/aes_enc-asm.S **** 	mov r30, ST11
 152:wireless/aes/aes_enc-asm.S **** 	lpm ST01, Z
 153:wireless/aes/aes_enc-asm.S **** 	mov r30, ST21
 154:wireless/aes/aes_enc-asm.S **** 	lpm ST11, Z
 155:wireless/aes/aes_enc-asm.S **** 	mov r30, ST31
 156:wireless/aes/aes_enc-asm.S **** 	lpm ST21, Z
 157:wireless/aes/aes_enc-asm.S **** 	mov ST31, T0
 158               	
 159:wireless/aes/aes_enc-asm.S **** 	mov r30, ST02
 160:wireless/aes/aes_enc-asm.S **** 	lpm T0, Z
 161:wireless/aes/aes_enc-asm.S **** 	mov r30, ST12
 162:wireless/aes/aes_enc-asm.S **** 	lpm T1, Z
 163:wireless/aes/aes_enc-asm.S **** 	mov r30, ST22
 164:wireless/aes/aes_enc-asm.S **** 	lpm ST02, Z
 165:wireless/aes/aes_enc-asm.S **** 	mov r30, ST32
 166:wireless/aes/aes_enc-asm.S **** 	lpm ST12, Z
 167:wireless/aes/aes_enc-asm.S **** 	mov ST22, T0
 168:wireless/aes/aes_enc-asm.S **** 	mov ST32, T1
 169               	
 170:wireless/aes/aes_enc-asm.S **** 	mov r30, ST03
 171:wireless/aes/aes_enc-asm.S **** 	lpm T0, Z
 172:wireless/aes/aes_enc-asm.S **** 	mov r30, ST33
 173:wireless/aes/aes_enc-asm.S **** 	lpm ST03, Z
 174:wireless/aes/aes_enc-asm.S **** 	mov r30, ST23
 175:wireless/aes/aes_enc-asm.S **** 	lpm ST33, Z
 176:wireless/aes/aes_enc-asm.S **** 	mov r30, ST13
 177:wireless/aes/aes_enc-asm.S **** 	lpm ST23, Z
 178:wireless/aes/aes_enc-asm.S **** 	mov ST13, T0
 179               			
 180               		/* mixcols (or rows in our case) */
 181:wireless/aes/aes_enc-asm.S **** 	brtc 2f
 182:wireless/aes/aes_enc-asm.S **** 	rjmp 1b
 183               	2:	
 184               	 /* mixrows */
 185               	 .irp row, 0, 1, 2, 3
 186:wireless/aes/aes_enc-asm.S **** 	mov r0, ST\row\()2
 187:wireless/aes/aes_enc-asm.S **** 	eor r0, ST\row\()3
 188:wireless/aes/aes_enc-asm.S **** 	mov T2, r0
 189:wireless/aes/aes_enc-asm.S **** 
 190:wireless/aes/aes_enc-asm.S **** 	mov T0, ST\row\()0
 191:wireless/aes/aes_enc-asm.S **** 	eor ST\row\()0, ST\row\()1
 192:wireless/aes/aes_enc-asm.S **** 	eor r0, ST\row\()0
 193:wireless/aes/aes_enc-asm.S **** 	lsl ST\row\()0
 194:wireless/aes/aes_enc-asm.S **** 	brcc 3f
 195:wireless/aes/aes_enc-asm.S **** 	eor ST\row\()0, xREDUCER
 196:wireless/aes/aes_enc-asm.S **** 3:	eor ST\row\()0, r0
 197:wireless/aes/aes_enc-asm.S **** 	eor ST\row\()0, T0
 198:wireless/aes/aes_enc-asm.S **** 
 199:wireless/aes/aes_enc-asm.S **** 	mov T1, ST\row\()1
 200:wireless/aes/aes_enc-asm.S **** 	eor T1, ST\row\()2
 201:wireless/aes/aes_enc-asm.S **** 	lsl T1
 202:wireless/aes/aes_enc-asm.S **** 	brcc 3f
 203:wireless/aes/aes_enc-asm.S **** 	eor T1, xREDUCER
 204:wireless/aes/aes_enc-asm.S **** 3:	eor T1, r0
 205:wireless/aes/aes_enc-asm.S **** 	eor ST\row\()1, T1
 206:wireless/aes/aes_enc-asm.S **** 
 207:wireless/aes/aes_enc-asm.S **** 	lsl T2
 208:wireless/aes/aes_enc-asm.S **** 	brcc 3f
 209:wireless/aes/aes_enc-asm.S **** 	eor T2, xREDUCER
 210:wireless/aes/aes_enc-asm.S **** 3:  eor T2, r0
 211:wireless/aes/aes_enc-asm.S **** 	eor ST\row\()2, T2
 212:wireless/aes/aes_enc-asm.S **** 
 213:wireless/aes/aes_enc-asm.S **** 	eor T0, ST\row\()3
 214:wireless/aes/aes_enc-asm.S **** 	lsl T0
 215:wireless/aes/aes_enc-asm.S **** 	brcc 3f
 216:wireless/aes/aes_enc-asm.S **** 	eor T0, xREDUCER
 217:wireless/aes/aes_enc-asm.S **** 3:	eor T0, r0
 218:wireless/aes/aes_enc-asm.S **** 	eor ST\row\()3, T0
 219:wireless/aes/aes_enc-asm.S **** 
 220:wireless/aes/aes_enc-asm.S **** .endr
 221               		/* mix colums (rows) done */
 222               	
 223               		/* add key*/
 224:wireless/aes/aes_enc-asm.S **** 	rjmp 1b
DEFINED SYMBOLS
wireless/aes/aes_enc-asm.S:36     *ABS*:000000000000001c A
wireless/aes/aes_enc-asm.S:37     *ABS*:000000000000001d B
wireless/aes/aes_enc-asm.S:38     *ABS*:0000000000000000 P
wireless/aes/aes_enc-asm.S:39     *ABS*:0000000000000019 xREDUCER
wireless/aes/aes_enc-asm.S:42     .text:0000000000000000 aes256_enc
wireless/aes/aes_enc-asm.S:88     .text:000000000000000a aes_encrypt_core
wireless/aes/aes_enc-asm.S:47     .text:0000000000000004 aes192_enc
wireless/aes/aes_enc-asm.S:52     .text:0000000000000008 aes128_enc
wireless/aes/aes_enc-asm.S:59     *ABS*:0000000000000002 T0
wireless/aes/aes_enc-asm.S:60     *ABS*:0000000000000003 T1
wireless/aes/aes_enc-asm.S:61     *ABS*:0000000000000004 T2
wireless/aes/aes_enc-asm.S:62     *ABS*:0000000000000005 T3
wireless/aes/aes_enc-asm.S:63     *ABS*:0000000000000006 SBOX_SAVE0
wireless/aes/aes_enc-asm.S:64     *ABS*:0000000000000007 SBOX_SAVE1
wireless/aes/aes_enc-asm.S:65     *ABS*:0000000000000008 ST00
wireless/aes/aes_enc-asm.S:66     *ABS*:0000000000000009 ST01
wireless/aes/aes_enc-asm.S:67     *ABS*:000000000000000a ST02
wireless/aes/aes_enc-asm.S:68     *ABS*:000000000000000b ST03
wireless/aes/aes_enc-asm.S:69     *ABS*:000000000000000c ST10
wireless/aes/aes_enc-asm.S:70     *ABS*:000000000000000d ST11
wireless/aes/aes_enc-asm.S:71     *ABS*:000000000000000e ST12
wireless/aes/aes_enc-asm.S:72     *ABS*:000000000000000f ST13
wireless/aes/aes_enc-asm.S:73     *ABS*:0000000000000010 ST20
wireless/aes/aes_enc-asm.S:74     *ABS*:0000000000000011 ST21
wireless/aes/aes_enc-asm.S:75     *ABS*:0000000000000012 ST22
wireless/aes/aes_enc-asm.S:76     *ABS*:0000000000000013 ST23
wireless/aes/aes_enc-asm.S:77     *ABS*:0000000000000014 ST30
wireless/aes/aes_enc-asm.S:78     *ABS*:0000000000000015 ST31
wireless/aes/aes_enc-asm.S:79     *ABS*:0000000000000016 ST32
wireless/aes/aes_enc-asm.S:80     *ABS*:0000000000000017 ST33
wireless/aes/aes_enc-asm.S:81     *ABS*:0000000000000018 CTR
wireless/aes/aes_enc-asm.S:119    .text:00000000000000a0 exit

UNDEFINED SYMBOLS
aes_sbox
