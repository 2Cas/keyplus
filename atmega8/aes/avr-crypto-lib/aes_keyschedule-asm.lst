   1               	# 1 "wireless/aes/aes_keyschedule-asm.S"
   1               	/* aes_keyschedule-asm */
   0               	
   0               	
   2               	/*
   3               	    This file is part of the AVR-Crypto-Lib.
   4               	    Copyright (C) 2006-2015 Daniel Otte (bg@nerilex.org)
   5               	
   6               	    This program is free software: you can redistribute it and/or modify
   7               	    it under the terms of the GNU General Public License as published by
   8               	    the Free Software Foundation, either version 3 of the License, or
   9               	    (at your option) any later version.
  10               	
  11               	    This program is distributed in the hope that it will be useful,
  12               	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13               	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14               	    GNU General Public License for more details.
  15               	
  16               	    You should have received a copy of the GNU General Public License
  17               	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18               	*/
  19               	/**
  20               	 * \file     aes_keyschedule-asm.S
  21               	 * \email    bg@nerilex.org
  22               	 * \author   Daniel Otte 
  23               	 * \date     2009-01-09
  24               	 * \license  GPLv3 or later
  25               	 * 
  26               	 */
  27               	
  28               	#include "avr-asm-macros.S"
   1               	/* avr-asm-macros.S */
  33               	.list
  34               	/*******************************************************************************
  35               	*  MACRO SECTION                                                               *
  36               	*******************************************************************************/
  37               	
  38               	.macro push_ p1:req, p2:vararg
  39               		push \p1
  40               	.ifnb \p2
  41               		push_ \p2
  42               	.endif
  43               	.endm
  44               	
  45               	.macro pop_ p1:req, p2:vararg
  46               		pop \p1
  47               	.ifnb \p2
  48               		pop_ \p2
  49               	.endif
  50               	.endm
  51               	
  52               	.macro push_range from:req, to:req
  53               		push \from
  54               	.if     \to-\from
  55               		push_range "(\from+1)",\to
  56               	.endif
  57               	.endm
  58               	
  59               	.macro pop_range from:req, to:req
  60               		pop \to
  61               	.if     \to-\from
  62               		pop_range \from,"(\to-1)"
  63               	.endif
  64               	.endm
  65               	
  66               	.macro stack_alloc size:req, reg1=r30, reg2=r31
  67               		in r0, _SFR_IO_ADDR(SREG)
  68               		in \reg1, _SFR_IO_ADDR(SPL)
  69               		in \reg2, _SFR_IO_ADDR(SPH)
  70               		sbiw \reg1, \size
  71               		cli
  72               		out _SFR_IO_ADDR(SPH), \reg2
  73               		out _SFR_IO_ADDR(SREG), r0
  74               		out _SFR_IO_ADDR(SPL), \reg1
  75               	.endm
  76               	
  77               	.macro stack_free size:req, reg1=r30, reg2=r31
  78               		in r0, _SFR_IO_ADDR(SREG)
  79               		in \reg1, _SFR_IO_ADDR(SPL)
  80               		in \reg2, _SFR_IO_ADDR(SPH)
  81               		adiw \reg1, \size
  82               		cli
  83               		out _SFR_IO_ADDR(SPH), \reg2
  84               		out _SFR_IO_ADDR(SREG), r0
  85               		out _SFR_IO_ADDR(SPL), \reg1
  86               	.endm
  87               	
  88               	
  89               	.macro stack_alloc_large size:req, reg1=r30, reg2=r31
  90               		in r0, _SFR_IO_ADDR(SREG)
  91               		in \reg1, _SFR_IO_ADDR(SPL)
  92               		in \reg2, _SFR_IO_ADDR(SPH)
  93               		subi \reg1, lo8(\size)
  94               		sbci \reg2, hi8(\size)
  95               		cli
  96               		out _SFR_IO_ADDR(SPH), \reg2
  97               		out _SFR_IO_ADDR(SREG), r0
  98               		out _SFR_IO_ADDR(SPL), \reg1
  99               	.endm
 100               	
 101               	.macro stack_free_large size:req, reg1=r30, reg2=r31
 102               		in r0, _SFR_IO_ADDR(SREG)
 103               		in \reg1, _SFR_IO_ADDR(SPL)
 104               		in \reg2, _SFR_IO_ADDR(SPH)
 105               		adiw \reg1, 63
 106               		adiw \reg1, (\size-63)
 107               		cli
 108               		out _SFR_IO_ADDR(SPH), \reg2
 109               		out _SFR_IO_ADDR(SREG), r0
 110               		out _SFR_IO_ADDR(SPL), \reg1
 111               	.endm
 112               	
 113               	.macro stack_free_large2 size:req, reg1=r30, reg2=r31
 114               		in r0, _SFR_IO_ADDR(SREG)
 115               		in \reg1, _SFR_IO_ADDR(SPL)
 116               		in \reg2, _SFR_IO_ADDR(SPH)
 117               		adiw \reg1, 63
 118               		adiw \reg1, 63
 119               		adiw \reg1, (\size-63*2)
 120               		cli
 121               		out _SFR_IO_ADDR(SPH), \reg2
 122               		out _SFR_IO_ADDR(SREG), r0
 123               		out _SFR_IO_ADDR(SPL), \reg1
 124               	.endm
 125               	
 126               	.macro stack_free_large3 size:req, reg1=r30, reg2=r31
 127               		in r0, _SFR_IO_ADDR(SREG)
 128               		in \reg1, _SFR_IO_ADDR(SPL)
 129               		in \reg2, _SFR_IO_ADDR(SPH)
 130               		push r16
 131               		push r17
 132               		ldi r16, lo8(\size)
 133               		ldi r17, hi8(\size)
 134               		add \reg1, r16
 135               		adc \reg2, r17
 136               		pop r17
 137               		pop r16
 138               		cli
 139               		out _SFR_IO_ADDR(SPH), \reg2
 140               		out _SFR_IO_ADDR(SREG), r0
 141               		out _SFR_IO_ADDR(SPL), \reg1
 142               	.endm
 143               	
  29               	
  30               	.global aes256_init
  31               	aes256_init:
  32:wireless/aes/aes_keyschedule-asm.S **** 	movw r20, r22
  33:wireless/aes/aes_keyschedule-asm.S **** 	ldi r23, hi8(256)
  34:wireless/aes/aes_keyschedule-asm.S **** 	ldi r22, lo8(256)
  35:wireless/aes/aes_keyschedule-asm.S **** 	rjmp aes_init
  36               		
  37               	.global aes192_init
  38               	aes192_init:
  39:wireless/aes/aes_keyschedule-asm.S **** 	movw r20, r22
  40:wireless/aes/aes_keyschedule-asm.S **** 	ldi r23, hi8(192)
  41:wireless/aes/aes_keyschedule-asm.S **** 	ldi r22, lo8(192)
  42:wireless/aes/aes_keyschedule-asm.S **** 	rjmp aes_init
  43               		
  44               	.global aes128_init
  45               	aes128_init:
  46:wireless/aes/aes_keyschedule-asm.S **** 	movw r20, r22
  47:wireless/aes/aes_keyschedule-asm.S **** 	clr r23
  48:wireless/aes/aes_keyschedule-asm.S **** 	ldi r22, 128
  49               	
  50               	/* 
  51               	void aes_init(const void *key, uint16_t keysize_b, aes_genctx_t *ctx){
  52               		uint8_t hi,i,nk, next_nk;
  53               		uint8_t rc=1;
  54               		uint8_t tmp[4];
  55               		nk=keysize_b>>5; / * 4, 6, 8 * /
  56               		hi=4*(nk+6+1);
  57               		memcpy(ctx, key, keysize_b/8);
  58               		next_nk = nk;
  59               		for(i=nk;i<hi;++i){
  60               			*((uint32_t*)tmp) = ((uint32_t*)(ctx->key[0].ks))[i-1];
  61               			if(i!=next_nk){
  62               				if(nk==8 && i%8==4){
  63               					tmp[0] = pgm_read_byte(aes_sbox+tmp[0]);
  64               					tmp[1] = pgm_read_byte(aes_sbox+tmp[1]);
  65               					tmp[2] = pgm_read_byte(aes_sbox+tmp[2]);
  66               					tmp[3] = pgm_read_byte(aes_sbox+tmp[3]);
  67               				}
  68               			} else {
  69               				next_nk += nk;
  70               				aes_rotword(tmp);
  71               				tmp[0] = pgm_read_byte(aes_sbox+tmp[0]);
  72               				tmp[1] = pgm_read_byte(aes_sbox+tmp[1]);
  73               				tmp[2] = pgm_read_byte(aes_sbox+tmp[2]);
  74               				tmp[3] = pgm_read_byte(aes_sbox+tmp[3]);
  75               				tmp[0] ^= rc;
  76               				rc<<=1;
  77               			}
  78               			((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
  79               			                                   ^ *((uint32_t*)tmp);
  80               		}
  81               	}
  82               	*/
  83               	
  84               	SBOX_SAVE0 = 14
  85               	SBOX_SAVE1 = 15
  86               	XRC = 17
  87               	NK = 22
  88               	C1 = 18
  89               	NEXT_NK = 19
  90               	HI = 23
  91               	T0 = 20
  92               	T1 = 21
  93               	T2 = 24
  94               	T3 = 25
  95               	/*
  96               	 * param key:       r24:r25
  97               	 * param keysize_b: r22:r23
  98               	 * param ctx:       r20:r21
  99               	 */
 100               	.global aes_init
 101               	aes_init:
 102:wireless/aes/aes_keyschedule-asm.S **** 	push_range 14, 17
 103:wireless/aes/aes_keyschedule-asm.S **** 	push r28
 104:wireless/aes/aes_keyschedule-asm.S **** 	push r29
 105:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, r20
 106:wireless/aes/aes_keyschedule-asm.S **** 	movw r28, r20
 107:wireless/aes/aes_keyschedule-asm.S **** 	movw r26, r24
 108:wireless/aes/aes_keyschedule-asm.S **** 	lsr r23
 109:wireless/aes/aes_keyschedule-asm.S **** 	ror r22
 110:wireless/aes/aes_keyschedule-asm.S **** 	lsr r22
 111:wireless/aes/aes_keyschedule-asm.S **** 	lsr r22 /* r22 contains keysize_b/8 */
 112:wireless/aes/aes_keyschedule-asm.S **** 	mov C1, r22
 113               	
 114               	1:	/* copy key to ctx */ 
 115:wireless/aes/aes_keyschedule-asm.S **** 	ld r0, X+
 116:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, r0
 117:wireless/aes/aes_keyschedule-asm.S **** 	dec C1
 118:wireless/aes/aes_keyschedule-asm.S **** 	brne 1b
 119               		
 120:wireless/aes/aes_keyschedule-asm.S **** 	lsr NK
 121:wireless/aes/aes_keyschedule-asm.S **** 	lsr NK
 122:wireless/aes/aes_keyschedule-asm.S **** 	bst NK,3 /* set T if NK==8 */
 123:wireless/aes/aes_keyschedule-asm.S **** 	mov NEXT_NK, NK
 124:wireless/aes/aes_keyschedule-asm.S **** 	mov HI, NK
 125:wireless/aes/aes_keyschedule-asm.S **** 	subi HI, -7
 126:wireless/aes/aes_keyschedule-asm.S **** 	lsl HI
 127:wireless/aes/aes_keyschedule-asm.S **** 	lsl HI
 128:wireless/aes/aes_keyschedule-asm.S **** 	movw r26, r30
 129:wireless/aes/aes_keyschedule-asm.S **** 	sbiw r26, 4
 130:wireless/aes/aes_keyschedule-asm.S **** 	mov C1, NK
 131:wireless/aes/aes_keyschedule-asm.S **** 	ldi r30, lo8(aes_sbox)
 132:wireless/aes/aes_keyschedule-asm.S **** 	ldi r31, hi8(aes_sbox)
 133:wireless/aes/aes_keyschedule-asm.S **** 	movw SBOX_SAVE0, r30
 134:wireless/aes/aes_keyschedule-asm.S **** 	ldi XRC, 1
 135               	1:	
 136:wireless/aes/aes_keyschedule-asm.S **** 	ld T0, X+
 137:wireless/aes/aes_keyschedule-asm.S **** 	ld T1, X+
 138:wireless/aes/aes_keyschedule-asm.S **** 	ld T2, X+
 139:wireless/aes/aes_keyschedule-asm.S **** 	ld T3, X+
 140:wireless/aes/aes_keyschedule-asm.S **** 	cp NEXT_NK, C1
 141:wireless/aes/aes_keyschedule-asm.S **** 	breq 2f 
 142:wireless/aes/aes_keyschedule-asm.S **** 	brtc 5f
 143:wireless/aes/aes_keyschedule-asm.S **** 	mov r16, C1
 144:wireless/aes/aes_keyschedule-asm.S **** 	andi r16, 0x07
 145:wireless/aes/aes_keyschedule-asm.S **** 	cpi r16, 0x04
 146:wireless/aes/aes_keyschedule-asm.S **** 	brne 5f
 147:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 148:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T0
 149:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 150:wireless/aes/aes_keyschedule-asm.S **** 	lpm T0, Z
 151:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 152:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T1
 153:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 154:wireless/aes/aes_keyschedule-asm.S **** 	lpm T1, Z
 155:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 156:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T2
 157:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 158:wireless/aes/aes_keyschedule-asm.S **** 	lpm T2, Z
 159:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 160:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T3
 161:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 162:wireless/aes/aes_keyschedule-asm.S **** 	lpm T3, Z
 163:wireless/aes/aes_keyschedule-asm.S **** 	rjmp 5f
 164               	2:
 165:wireless/aes/aes_keyschedule-asm.S **** 	add NEXT_NK, NK
 166:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 167:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T0
 168:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 169:wireless/aes/aes_keyschedule-asm.S **** 	lpm r16, Z
 170:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 171:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T1
 172:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 173:wireless/aes/aes_keyschedule-asm.S **** 	lpm T0, Z
 174:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 175:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T2
 176:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 177:wireless/aes/aes_keyschedule-asm.S **** 	lpm T1, Z
 178:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, SBOX_SAVE0
 179:wireless/aes/aes_keyschedule-asm.S **** 	add r30, T3
 180:wireless/aes/aes_keyschedule-asm.S **** 	adc r31, r1
 181:wireless/aes/aes_keyschedule-asm.S **** 	lpm T2, Z
 182:wireless/aes/aes_keyschedule-asm.S **** 	mov T3, r16
 183:wireless/aes/aes_keyschedule-asm.S **** 	eor T0, XRC
 184:wireless/aes/aes_keyschedule-asm.S **** 	lsl XRC
 185:wireless/aes/aes_keyschedule-asm.S **** 	brcc 3f
 186:wireless/aes/aes_keyschedule-asm.S **** 	ldi XRC, 0x1b
 187               	3:
 188               	5:	
 189:wireless/aes/aes_keyschedule-asm.S **** 	movw r30, r26
 190               	
 191:wireless/aes/aes_keyschedule-asm.S **** 	ld r0, Y+
 192:wireless/aes/aes_keyschedule-asm.S **** 	eor r0, T0
 193:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, r0 
 194:wireless/aes/aes_keyschedule-asm.S **** 	ld r0, Y+
 195:wireless/aes/aes_keyschedule-asm.S **** 	eor r0 ,T1
 196:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, r0
 197:wireless/aes/aes_keyschedule-asm.S **** 	ld r0, Y+
 198:wireless/aes/aes_keyschedule-asm.S **** 	eor r0, T2
 199:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, r0
 200:wireless/aes/aes_keyschedule-asm.S **** 	ld r0, Y+
 201:wireless/aes/aes_keyschedule-asm.S **** 	eor r0, T3
 202:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, r0
 203               		
 204:wireless/aes/aes_keyschedule-asm.S **** /*
 205:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, T0
 206:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, T1
 207:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, T2
 208:wireless/aes/aes_keyschedule-asm.S **** 	st Z+, T3
 209:wireless/aes/aes_keyschedule-asm.S **** */		
 210:wireless/aes/aes_keyschedule-asm.S **** 	
 211:wireless/aes/aes_keyschedule-asm.S **** 	inc C1
 212:wireless/aes/aes_keyschedule-asm.S **** 	cp C1, HI
 213:wireless/aes/aes_keyschedule-asm.S **** 	breq 6f
 214:wireless/aes/aes_keyschedule-asm.S **** 	rjmp 1b
 215               	6:	
 216               		
 217:wireless/aes/aes_keyschedule-asm.S **** 	clt
 218:wireless/aes/aes_keyschedule-asm.S **** 	pop r29
 219:wireless/aes/aes_keyschedule-asm.S **** 	pop r28
 220:wireless/aes/aes_keyschedule-asm.S **** 	pop_range 14, 17
 221:wireless/aes/aes_keyschedule-asm.S **** 	ret
DEFINED SYMBOLS
wireless/aes/aes_keyschedule-asm.S:31     .text:0000000000000000 aes256_init
wireless/aes/aes_keyschedule-asm.S:101    .text:0000000000000016 aes_init
wireless/aes/aes_keyschedule-asm.S:38     .text:0000000000000008 aes192_init
wireless/aes/aes_keyschedule-asm.S:45     .text:0000000000000010 aes128_init
wireless/aes/aes_keyschedule-asm.S:84     *ABS*:000000000000000e SBOX_SAVE0
wireless/aes/aes_keyschedule-asm.S:85     *ABS*:000000000000000f SBOX_SAVE1
wireless/aes/aes_keyschedule-asm.S:86     *ABS*:0000000000000011 XRC
wireless/aes/aes_keyschedule-asm.S:87     *ABS*:0000000000000016 NK
wireless/aes/aes_keyschedule-asm.S:88     *ABS*:0000000000000012 C1
wireless/aes/aes_keyschedule-asm.S:89     *ABS*:0000000000000013 NEXT_NK
wireless/aes/aes_keyschedule-asm.S:90     *ABS*:0000000000000017 HI
wireless/aes/aes_keyschedule-asm.S:91     *ABS*:0000000000000014 T0
wireless/aes/aes_keyschedule-asm.S:92     *ABS*:0000000000000015 T1
wireless/aes/aes_keyschedule-asm.S:93     *ABS*:0000000000000018 T2
wireless/aes/aes_keyschedule-asm.S:94     *ABS*:0000000000000019 T3

UNDEFINED SYMBOLS
aes_sbox
